import streamlit as st
from dotenv import load_dotenv
import time
load_dotenv()
def typewriter(text: str ):
    speed=13
    tokens = text.split()
    container = st.empty()
    for index in range(len(tokens) + 1):
        curr_full_text = " ".join(tokens[:index])
        container.write(f':green[{curr_full_text}]')
        time.sleep(1 / speed)
        
st.divider()
st.title(":red[ LANGCHAIN POWERED WITH LLM]")
st.divider()

import requests
with st.sidebar:
        st.title("      AKWAABA ")
        st.markdown('''
        About ‚¨áÔ∏è
      \nThis is an LLM-powered Chatbot Built Using:
      \n- [Streamlit](https://streamlit.com) 
      \n- [OPENAI](https://platform.openai.com/usage)
      \n- [Langchain](https://python.langchain.com/docs/integrations/llms/huggingface_pipeline)\n ''')
   
        st.write("Made with ‚ù§Ô∏è by prompt Engineer Bruce Arhin Shadrach")
from streamlit_extras.add_vertical_space import add_vertical_space
from streamlit_extras.buy_me_a_coffee import button        

# Save uploaded Document to memory state so it can be refered by the AI

from openai import APIConnectionError   
text=""
if "Docname" not in st.session_state:
    st.session_state.Docname=[]
  
from PyPDF2 import PdfReader 
if "Document" not in st.session_state:
    st.session_state.Document = []
def main():
    
    tab1,tab2=st.tabs(["üìù CHAT WITH YOUR DOCUMENT","üó®Ô∏è BRUCE ARTIFICIAL INTELLIGENT CHATBOT"])
    with tab1:
        
        
        st.title(":red[  WELCOME PLEASE UPLOAD YOU DOCUMENT HERE üîΩ]")
        uploader_file=st.file_uploader("Upload a file")
        
    
        if uploader_file is not None:
            if st.button("Click to Upload"):
                
                text=""
                try:
                    
                    with st.spinner(f"CONVERTING AND UPLOADING TO SERVER {uploader_file.name} to text"):
                        name=uploader_file.name
                        new_name=name.split('.pdf')
                        Doc=PdfReader(uploader_file)
                        for page in Doc.pages:
                            text+= page.extract_text()
                        st.session_state.Document.append({'page_content':text})   
                        Data=requests.post('http://127.0.0.1:5000/textembeddings/faiss', json={'Name':new_name,'Document':st.session_state.Document})
                        if Data.status_code == 200:
                            message=Data.json()['response']
                            st.session_state.Docname.append({'File':message})
                            st.success(f":green[UPLOAD WAS SUCESSFUL]")
                            #st.success(f":green[{st.session_state.Docname[0].get('File')}]")
                        else:
                            out = Data.json()['response']
                            st.write(f":red[{out}]")    
                except requests.exceptions.RequestException:
                    st.write(":red[Error: Unable to Establish connection to the Flask server.]")
                except APIConnectionError as ex:
                    st.warning(ex)  
                             

        
                          
                
        if "messagesw" not in st.session_state:
            st.session_state.messagesw = []
        # Display chat messages from history on app rerun
        for message in st.session_state.messagesw:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])            
        if stt:=st.text_input("Message ",key="fighter"):
            if stt is None and uploader_file is not None:
                st.warning(":red[TextBox is Empty]", icon="‚ö†Ô∏è")
            elif stt is not None and uploader_file is not None and st.session_state.Docname is not None:
                with st.spinner("Thinking and Search through Your Document"):
                    try:
                    
                        #st.write( st.session_state.Docname[0].get('File'))
                        Chain=requests.post('http://127.0.0.1:5000/VecStore',json={"Vector":st.session_state.Docname[0].get('File'),'Query':stt})
                        if Chain.status_code==200:
                            message=Chain.json()["response"]
                            respond=f"ChatBot: {message}"
                            with st.chat_message("assistant"):
                                typewriter(text=respond)
                            # Add user message to chat history
                            st.session_state.messagesw.append({"role": "Human", "content": stt})    
                            # Add assistant response to chat history
                            st.session_state.messagesw.append({"role": "AI", "content": respond})
                        
                        else: 
                            message=Chain.json()["response"] 
                            st.write(f":red[{out}]")    
                    except APIConnectionError as ex:
                        st.error("Error: Failed to establish a new connection please Check Your internet Connection",icon="üö®") 
                    except ConnectionError as ex:
                        st.warning(ex,icon="‚ö†Ô∏è")        
            elif stt is not None and uploader_file is None:
                st.warning(":red[Upload Document First ]", icon="‚ö†Ô∏è")      
    with tab2:
        
        st.title(":blue[BRUCE ARTIFICIAL INTELLIGENT CHATBOT]")
        st.header(':blue[Search Anything Or Have A Chat With me üëçüëçüëç]')
        code=":blue[Welcome! This is a small app with the capability to  [Ask for Human Help,Search,Check Weather,Do Calculations]\n Let me know when you're ready to proceed!]"
        st.write(code)
        if "messages" not in st.session_state:
            st.session_state.messages = []
        # Display chat messages from history on app rerun
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        if query:=st.text_input("Message Bruce AI",key="sageinput"):
            #Display user message in chat message container
            st.chat_message("user").markdown(f":green[User: {query}]")
            try:
                with st.spinner("Just a moment, Thinking "):        
            #API request to the flask server i have my FUnction Calling hosted on the RestAPI Endpoint
                    response = requests.post('http://127.0.0.1:5000/api/chat/Agent', json={'message': query,'memory':st.session_state.messages})
                    if response.status_code == 200:
                        out = response.json()['response']
                        respond=f"ChatBot: {out}"
                        with st.chat_message("assistant"):
                             typewriter(text=respond)
                        # Add user message to chat history
                        st.session_state.messages.append({"role": "Human", "content": query})    
                        # Add assistant response to chat history
                        st.session_state.messages.append({"role": "AI", "content": respond})
                    elif response.status_code==500:
                        st.write(f":red[Internal Server Error \n Ooops, Something went wrong]")
                    else:
                        out = response.json()['response']
                        st.write(f":red[{out}]")
            except requests.exceptions.RequestException:
                st.write(":red[Error: Unable to Establish connection to the Flask server.]")        


if __name__=='__main__':
    main()
